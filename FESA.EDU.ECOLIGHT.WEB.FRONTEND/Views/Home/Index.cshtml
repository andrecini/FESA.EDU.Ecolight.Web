@model HomeViewModel
@{
    ViewData["Title"] = "Dashboard";
}


<link href="~/css/dashboard/index.css" rel="stylesheet" />

<div id="line-data" class="row w-100">
    <div class="col card">
        <span class="card-title">Ativos</span>

        <div class="card-info">
            <span class="card-data">@Model.Ativo</span>
            <i class="card-icon material-icons"> brightness_5</i>
        </div>
    </div>

    <div class="col card">
        <span class="card-title">Inativos</span>


        <div class="card-info">
            <span class="card-data">@Model.Inativo</span>
            <i class="card-icon material-icons"> brightness_7 </i>
        </div>
    </div>

    @*     <div class="col card">
    <span class="card-title">CriticalDevices</span>

    <div class="card-info">
    <span class="card-data">@Model.</span>
    <i class="card-icon material-icons"> brightness_6 </i>
    </div>
    </div> *@

    <div class="col card">
        <span class="card-title">Dispositivos</span>
        <div class="card-info">
            <span class="card-data">@Model.Total</span>
            <i class="card-icon material-icons"> memory </i>
        </div>
    </div>
</div>

<div id="main-data" class="row w-100">
    <div class="col h-100 p-0">
        <div class="card h-100">
            <div class="card-title">
                <i class="card-title-icon material-icons"> alarm-smart-wake </i>
                <span>Rotinas</span>
            </div>
            <div class="card-list mt-4">
                @for (int i = 1; i < 11; i++)
                {
                    <div class="card shadow-sm w-100 p-0">
                        <div class="card-body row align-items-cents w-100 m-0 p-2">
                            <div class="col p-0">
                                <span class="card-title">Automação @i</span>
                            </div>
                            <div class="col-auto p-0">
                                <span class="tag tag-ativo ms-2"></span>
                                <span class="tag tag-ativo ms-2">6:00 pm</span>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <div id="column-data" class="col-4 flex-column">
        <div class="card h-50">
            <div class="card-title">
                <i class="card-title-icon material-icons"> monetization_on </i>
                <span>Gasto Geral</span>
            </div>
            <div class="h-100 w-100">
                <canvas id="custo"></canvas>
            </div>
        </div>
        <div class="card h-50">
            <div class="card-title">
                <i class="card-title-icon material-icons"> energy_savings_leaf </i>
                <span> Consumo de Energia </span>
            </div>
            <canvas id="energia"></canvas>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    function RetornaUltimosSeisMeses() {
        let dataAtual = new Date();
        let mesAtual = dataAtual.getMonth();

        let todosOsMeses = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'];

        let ultimos6Meses = [];
        for (let i = 0; i < 6; i++) {
            let mes = todosOsMeses[(12 + mesAtual - 1) % 12];
            ultimos6Meses.unshift(mes);
        }

        console.log(ultimos6Meses);

        return ultimos6Meses;
    }

    function DefineGraficoCusto() {

        let ctx = document.getElementById('custo').getContext('2d');

        let dados = {
            labels: RetornaUltimosSeisMeses(),
            datasets: [{
                label: 'Reais (R$)',
                data: [@Model.DespesasDispositivosMensal.ToList()[0],
                       @Model.DespesasDispositivosMensal.ToList()[1],
                       @Model.DespesasDispositivosMensal.ToList()[2],
                       @Model.DespesasDispositivosMensal.ToList()[3],
                       @Model.DespesasDispositivosMensal.ToList()[4],
                       @Model.DespesasDispositivosMensal.ToList()[5]],
                backgroundColor: [
                    'rgba(126, 218, 132, 0.2)',
                    'rgba(126, 218, 132, 0.3)',
                    'rgba(126, 218, 132, 0.4)',
                    'rgba(126, 218, 132, 0.5)',
                    'rgba(126, 218, 132, 0.6)',
                    'rgba(126, 218, 132, 0.7)',
                ],
                borderColor: [
                    'rgba(80,172,86,1)'
                ],
                borderWidth: 1
            }]
        }

        let meuGrafico = new Chart(ctx, {
            type: 'bar',
            data: dados,
            options: {
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                }
            }
        });
    }

    function DefineGraficoEnergia() {

        let ctx = document.getElementById('energia').getContext('2d');

        let dados = {
            labels: RetornaUltimosSeisMeses(),
            datasets: [{
                label: 'kWh',
                data: [@Model.UsoKwhMensal.ToList()[0],
                       @Model.UsoKwhMensal.ToList()[1],
                       @Model.UsoKwhMensal.ToList()[2],
                       @Model.UsoKwhMensal.ToList()[3],
                       @Model.UsoKwhMensal.ToList()[4],
                       @Model.UsoKwhMensal.ToList()[5]],
                backgroundColor: [
                    'rgba(126, 218, 132, 0.2)',
                    'rgba(126, 218, 132, 0.3)',
                    'rgba(126, 218, 132, 0.4)',
                    'rgba(126, 218, 132, 0.5)',
                    'rgba(126, 218, 132, 0.6)',
                    'rgba(126, 218, 132, 0.7)',
                ],
                borderColor: [
                    'rgba(80,172,86,1)'
                ],
                borderWidth: 1
            }]
        }

        let meuGrafico = new Chart(ctx, {
            type: 'bar',
            data: dados,
            options: {
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                }
            }
        });
    }

    window.onload = function () {
        DefineGraficoCusto();
        DefineGraficoEnergia();
    }


</script>